@page "/"

@using Microsoft.AspNetCore.Identity;
@inject IServiceProvider _serviceProvider;
@* @inject UserManager<Data.ApplicationUser> UserManager; *@
@inject AuthenticationStateProvider _authenticationStateProvider;


<PageTitle>Home</PageTitle>

@*  @if(_isAuthenticated)
 {
     <p>You are logged in</p>
     @if(_isAdmin)
     {
         <p>You are Admin</p>
     }
 } else
 {
     <p>You are NOT logged in</p>
 } *@

<AuthorizeView>
    <Authorized>
        <p>You are logged in</p>
    </Authorized>
    <NotAuthorized>
        <p>You are NOT logged in</p>
    </NotAuthorized>
</AuthorizeView>
<AuthorizeView Roles="Admin">
    <Authorized>
        <p>You are Admin</p>
    </Authorized>
</AuthorizeView>


@code {
    private bool _isAuthenticated;
    private bool _isAdmin;

    public bool IsAuthenticated => _isAuthenticated;
    public bool IsAdmin => _isAdmin;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var authUser = authenticationState.User;
        _isAuthenticated = authUser.Identity.IsAuthenticated;
        _isAdmin = authUser.IsInRole("Admin");


        // not the right way to do this, just example instead of manual creation, make page to add email and role
        // await CreateUserRolesAsync("skjoldann@gmail.com", "Admin");
    }

    // public async Task CreateUserRolesAsync(string user, string role)
    // {
    //     var roleManager = _serviceProvider.GetRequiredService<RoleManager<IdentityRole>>();
    //     var userManager = UserManager;

    //     var userRoleCheck = await roleManager.RoleExistsAsync(role);
    //     if (!userRoleCheck)
    //     {
    //         await roleManager.CreateAsync(new IdentityRole(role));
    //     }

    //     Data.ApplicationUser identityUser = await userManager.FindByEmailAsync(user);
    //     await userManager.AddToRoleAsync(identityUser, role);
    // }
}