@page "/"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity;
@using TestOgSikkerhedApp.Data;
@using TestOgSikkerhedApp.Repositories;
@* @inject UserManager<Data.ApplicationUser> UserManager; *@
@inject IServiceProvider _serviceProvider;
@inject AuthenticationStateProvider _authenticationStateProvider;
@inject Codes.HashingHandler _hashingHandler;
@inject Codes.SymetriskEncryptionHandler _symetricEnryptionHandler;
@inject Codes.AsymetriskEncryptionHandler _asymetricEcryptionHandler;
@inject ToDoItemRepo _todoRepo;
@inject CprRepo _cprRepo;

@attribute [Authorize(Policy = "AuthenticatedUser")]




    <PageTitle>To Do List App</PageTitle>

    <AuthorizeView>
        <h1 class="text-center mt-4 mb-3">Hello @context.User.Identity?.Name!</h1>
    </AuthorizeView>

    @if (isNotAuthCpr)
    {
        <h3 class="text-center mb-5">Please enter your cpr: </h3>

        <div class="d-flex justify-content-center">

        <input class="text-center m-1" type="text" @bind="@inputValueCpr" placeholder="XXXXXX-XXXX" @oninput="OnCprInput">

            <button class="btn-info m-1" @onclick="addCpr">Submit</button>

        </div>

        @if (wrongCpr)
        {
        <div class="alert alert-danger text-center w-50" role="alert">
                <p>Cpr number is wrong. Try again.</p>
            </div>
        }
    }
    else
    {
        <h3 class="text-center mb-5">Enter ToDo item: </h3>

        <div class="d-flex justify-content-center">

        <input class="text-center m-1" type="text" @bind="@inputValueItem" placeholder="Things you need to get done" @oninput="OnItemInput">

        <button class="btn-info m-1" @onclick="addItem">Add Item</button>

        </div>

        <table class="table table-striped table-bordered mt-4">
            <thead>
                <tr>
                    <th>Todo:</th>

                </tr>
            </thead>
            <tbody>
            @foreach (var item in toDos.Where(x => _symetricEnryptionHandler.Unprotect(x.userName) == _userName))
                {
                    <tr>
                    <td>@_symetricEnryptionHandler.Unprotect(item.itemName)</td>
                    </tr>
                }
            </tbody>
        </table>
    }



@code {
    // authorized variables
    private bool _isAuthenticated;
    private bool _isAdmin;
    public bool IsAuthenticated => _isAuthenticated;
    public bool IsAdmin => _isAdmin;
    public bool isNotAuthCpr = true;
    public string _userName;
    public bool wrongCpr = false;

    // input related variables
    private string? cprNum = "";
    private string inputValueCpr;
    private string inputValueItem;

    // database variables

    private List<ToDoItem> toDos = new List<ToDoItem>();
    private List<CprUser> cprs = new List<CprUser>();



    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var authUser = authenticationState.User;
        _isAuthenticated = authUser.Identity.IsAuthenticated;
        _isAdmin = authUser.IsInRole("Admin");
        _userName = authUser.Identity.Name;

        // Asymetric encryption test
        string textToEncrypt = "Aisha1";
        string encryptText = await _asymetricEcryptionHandler.AsymetricEncrypt(textToEncrypt);
        string decrypt = await _asymetricEcryptionHandler.AsymetricDescrypt(encryptText);



        toDos = await _todoRepo.GetAllTodo();
        cprs = await _cprRepo.GetAllCpr();

        // not the right way to do this, just example instead of manual creation, make page to add email and role
        // await CreateUserRolesAsync("skjoldann@gmail.com", "Admin");
    }

    // public async Task CreateUserRolesAsync(string user, string role)
    // {
    //     var roleManager = _serviceProvider.GetRequiredService<RoleManager<IdentityRole>>();
    //     var userManager = UserManager;

    //     var userRoleCheck = await roleManager.RoleExistsAsync(role);
    //     if (!userRoleCheck)
    //     {
    //         await roleManager.CreateAsync(new IdentityRole(role));
    //     }

    //     Data.ApplicationUser identityUser = await userManager.FindByEmailAsync(user);
    //     await userManager.AddToRoleAsync(identityUser, role);
    // }

    private void OnCprInput(ChangeEventArgs e)
    {
        var inputValue = (string)e.Value;
    }

    private void OnItemInput(ChangeEventArgs e)
    {
        inputValueItem = (string)e.Value;
    }

    private async Task addCpr()
    {
        bool isValidCpr = false;

        var hashedCprNum = _hashingHandler.SHA256Hashing(inputValueCpr);

        if (string.IsNullOrEmpty(inputValueCpr))
        {
            return;
        }

        while (!isValidCpr)
        {
            if (cprs.Count == 0 && !string.IsNullOrEmpty(inputValueCpr))
            {
                await createNewCpr(hashedCprNum, _userName);
                inputValueCpr = "";
                isNotAuthCpr = false;
                isValidCpr = true;
            }
            else
            {
                foreach (var cprNumber in cprs)
                {

                    if (cprNumber.userName == _userName)
                    {
                        if (cprNumber.cprNum == hashedCprNum)
                        {
                            inputValueCpr = "";
                            wrongCpr = false;
                            isNotAuthCpr = false;
                            isValidCpr = true;
                        }
                        else
                        {
                            wrongCpr = true;
                            isValidCpr = true;
                        }

                    } 

                    else
                    {
                        if (!string.IsNullOrEmpty(inputValueItem))
                        {
                            await createNewCpr(hashedCprNum, _userName);

                            inputValueCpr = "";
                            isNotAuthCpr = false;
                            isValidCpr = true;
                        }
                    }
                }
                StateHasChanged();
            }
  
        }
    }

    private async Task createNewCpr(string cpr, string name)
    {
        CprUser newCpr = new CprUser
            {
                cprNum = cpr,
                userName = name
            };

        await _cprRepo.CreateCprAsync(newCpr);
    }

    private async Task addItem()
    {
        if (!string.IsNullOrEmpty(inputValueItem))
        {
            string encryptedItemName = _symetricEnryptionHandler.Protect(inputValueItem);
            string encryptedUserName = _symetricEnryptionHandler.Protect(_userName);

            ToDoItem newItem = new ToDoItem
                {
                    itemName = encryptedItemName,
                    userName = encryptedUserName
                };

            
            await _todoRepo.CreateTodoAsync(newItem);

            inputValueItem = string.Empty;

            toDos = await _todoRepo.GetAllTodo();
        }
    }

   
}